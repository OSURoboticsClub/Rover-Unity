//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Control Interface App/ControllerScripts/GameController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameController"",
    ""maps"": [
        {
            ""name"": ""DriveControl"",
            ""id"": ""e5e5d280-958e-44dc-b7ee-5e2d80762027"",
            ""actions"": [
                {
                    ""name"": ""Joy"",
                    ""type"": ""Value"",
                    ""id"": ""7234f501-1f21-466d-8f1c-b44d38d99fcd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe38a6ed-b9a6-4ff4-a8d4-6317f2c35cc6"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22a68926-5f23-443c-8fb6-22e8328ae7e5"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DriveControl
        m_DriveControl = asset.FindActionMap("DriveControl", throwIfNotFound: true);
        m_DriveControl_Joy = m_DriveControl.FindAction("Joy", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DriveControl
    private readonly InputActionMap m_DriveControl;
    private List<IDriveControlActions> m_DriveControlActionsCallbackInterfaces = new List<IDriveControlActions>();
    private readonly InputAction m_DriveControl_Joy;
    public struct DriveControlActions
    {
        private @GameController m_Wrapper;
        public DriveControlActions(@GameController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Joy => m_Wrapper.m_DriveControl_Joy;
        public InputActionMap Get() { return m_Wrapper.m_DriveControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DriveControlActions set) { return set.Get(); }
        public void AddCallbacks(IDriveControlActions instance)
        {
            if (instance == null || m_Wrapper.m_DriveControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DriveControlActionsCallbackInterfaces.Add(instance);
            @Joy.started += instance.OnJoy;
            @Joy.performed += instance.OnJoy;
            @Joy.canceled += instance.OnJoy;
        }

        private void UnregisterCallbacks(IDriveControlActions instance)
        {
            @Joy.started -= instance.OnJoy;
            @Joy.performed -= instance.OnJoy;
            @Joy.canceled -= instance.OnJoy;
        }

        public void RemoveCallbacks(IDriveControlActions instance)
        {
            if (m_Wrapper.m_DriveControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDriveControlActions instance)
        {
            foreach (var item in m_Wrapper.m_DriveControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DriveControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DriveControlActions @DriveControl => new DriveControlActions(this);
    public interface IDriveControlActions
    {
        void OnJoy(InputAction.CallbackContext context);
    }
}
